#include stdlang.asm\
#include stdstruct.asm\
#include stdio.asm\

//Printing Functions - print_scroll, print_char, print, print_hex, print_binary, print_signed, print_unsigned, print_clear,

//Scroll the text in gfx txt mem up a line USES AX BX
func print_scroll {
	//For each charater in 0 to 960 (lines 0 - 23), set it equal to char at +40
	put 40 BX;
	for! AX 0 960 {
		out BX GFX_TXT_ADDR;
		in CR GFX_TXT_DATA;
		out AX GFX_TXT_ADDR;
		out CR GFX_TXT_DATA;
		inc BX;
	};
	put 960 print_SCREEN_POS;
	put 0 BX;
	for! AX 960 1000 {
		out AX GFX_TXT_ADDR;
		out BX GFX_TXT_DATA;
	};
};

/* Print a char and format \t (0x09 - tab), \n (0x0a - newline), and \b (0x08 - backspace)
only actually output a value if the ascii value is >= 0x20*/
//USES AX BX
func print_char $char {
  	//If !(1000 > print_SCREEN_POS), print a newline
  	mv print_SCREEN_POS B OP_>;
	put 1000 A;
  	if_not! RES {
		call print_scroll;
	};
  	mv $char AX;
	//If (!(20 > char)), print the char - it will not be a special char
	mv AX B OP_>;
	put 0x20 A;
	if_not! RES {
		mv print_SCREEN_POS BX;
		out BX GFX_TXT_ADDR;
		out AX GFX_TXT_DATA;
		inc print_SCREEN_POS;
		ret 1;
	};
	//If (!($char-0x0a)), call print_scroll
	mv AX A OP_-;
	put 0x0a B;
	if_not! RES {
		call print_scroll;
		ret 1;
	};
	//If (!($char-0x09)), advance print_SCREEN_POS to +8
	mv AX A OP_-;
	put 0x09 B;
	if_not! RES {
		mv print_SCREEN_POS A OP_+;
		put 8 B;
		mv RES print_SCREEN_POS;
		ret 1;
	};
	//If (!($char-0x08)), dec print_SCREEN_POS, and clear last char
	mv AX A OP_-;
	put 0x08 B;
	if_not! RES {
		dec print_SCREEN_POS;
		mv print_SCREEN_POS A;
		out A GFX_TXT_ADDR;
		put 0 A;
		out A GFX_TXT_DATA;
		ret 1;
	};
};
//Start at the bottom left of the screen
label print_SCREEN_POS;
. 960;

/*Print a string, calling print_char on each character -$string is a pointer to string*/
//USES AX BX CX
func print $string {
	mv $string CX;
	label print_LOOP_START;
	mv CX MAR;
	out 0 MDR;
	if! MDR {
		call print_char MDR;
		inc CX;
		jump print_LOOP_START;
	};
};
//USES AX BX CX DX EX FX
func print_hex $num {
	mv $num EX;
  	put 0xf000 FX;
  	put 12 DX;
  	for! CX 0 4 {
	  	//Get each char: ($num & FX) >> DX
		mv EX A OP_&;
	  	mv FX B OP_&;
	  	mv RES A OP_>>;
	  	mv DX B OP_>>;
	  	mv RES A OP_+;
	  	put print_hex_CHARS B OP_+;
	  	mv RES MAR;
	  	call print_char MDR;

	  	mv DX A OP_-;
	  	put 4 B;
	  	mv RES DX;

	  	mv FX A OP_>>;
	  	put 4 B;
	  	mv RES FX;

	};
};

#string print_hex_CHARS
0123456789abcdef\

//USES AX BX CX DX EX FX
func print_binary $num {
	mv $num EX;
  	put 0b1000000000000000 FX;
  	put 15 DX;
  	for! CX 0 16 {
	  	//Get each char: ($num & FX) >> DX
		mv EX A OP_&;
	  	mv FX B OP_&;
	  	mv RES A OP_>>;
	  	mv DX B OP_>>;
	  	mv RES A OP_+;
	  	put print_binary_CHARS B OP_+;
	  	mv RES MAR;
	  	call print_char MDR;

	  	mv DX A OP_-;
	  	put 1 B;
	  	mv RES DX;

	  	mv FX A OP_>>;
	  	put 1 B;
	  	mv RES FX;

	};
};

#string print_binary_CHARS
01\

//Uses AX BX
func print_clear {
	put 0 BX;
	for! AX 0 1000 {
		out AX GFX_TXT_ADDR;
		out BX GFX_TXT_DATA;
	};
};

//Keyboard Entry Functions key_input
//key_input puts a pointer to a buffer (static now, malloc'd latter) that contains the string

//Uses AX BX (print_char) CX
func key_input {
	label key_input_START;
	in A KEY_IN_WAITING;
	mv CR CR OP_NOT;
	mv RES CND;
	jumpc key_input_START;

	in CX KEY_DATA;
	out CX KEY_NEXT;

	//Apply shift keys to key_input_SHIFTED
	mv CX A OP_-;
	put 0x10 B;
	if_not! RES {
		put 1 key_input_SHIFTED;
		jump key_input_START;
	};
	mv CX A OP_-;
	put 0x0110 B;
	if_not! RES {
		put 0 key_input_SHIFTED;
		jump key_input_START;
	};
	//Apply backspace press, print backspace, dec key_input_CUR_POS
	//Only apply backspaces if key_input_CUR_POS is > 0
	mv CX A OP_-;
	put 0x08 B;
	if_not! RES {
		//Only apply if current position is > 0
		mv key_input_CUR_POS B OP_>=;
		put 0 A;
		if_not! RES {
			call print_char 0x08;
			dec key_input_CUR_POS;

			mv key_input_CUR_POS A OP_+;
			put key_input_BUFFER B;
			mv RES A;
			put 0x0 B;
			mv A MAR;
			mv B MDR;
		};
		jump key_input_START;
	};
	//Apply tabs - convert tabs to eight spaces, and write to buffer
	mv CX A OP_-;
	put 0x09 B;
	if_not! RES {
		call print_char 0x09;
		//CX can be used because a jump back to loop start will be performed
		for! CX 0 8 {
			mv key_input_CUR_POS A OP_+;
			put key_input_BUFFER B;
			mv RES A;
			put 0x20 B;
			mv A MAR;
			mv B MDR;
			inc key_input_CUR_POS;
		};
		jump key_input_START;
	};
	//If the key is a release, go to the start of the loop, and don't do anything with it
	mv CX A OP_&;
	put 0b0000000100000000 B;
	mv RES CND;
	jumpc key_input_START;

	//If the key is below 32 and hasn't been dealt with, go to start of loop
	mv CX B OP_>;
	put 32 A;
	mv RES CND;
	jumpc key_input_START;

	//Print the key, and add it to key_input_BUFFER
	//If shifted, put the shifted char in CX
	mv key_input_SHIFTED A OP_NOT;
	if_not! RES {
		//Subtract 32 to get offset in shifted charset
		mv CX A OP_-;
		put 32 B;
		mv RES A OP_+;
		put key_input_CHARSET_SHIFTED B;
		mv RES MAR;
		mv MDR CX;
	};
	//print and add char in CX
	mv key_input_CUR_POS A OP_+;
	put key_input_BUFFER B;
	mv RES MAR;
	mv CX MDR;
	inc key_input_CUR_POS;
	call print_char CX;

	jump key_input_START;

};

label key_input_SHIFTED;
. 0;

label key_input_CUR_POS;
. 0;

// backslash has to be a data point or else it ends the
label key_input_CHARSET_SHIFTED;
#string
 !"#$%&"()*+<_>?)!@#$%^&*(::<+>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ{|}^_~ABCDEFGHIJKLMNOPQRSTUVWXYZ{|}~\

label key_input_BUFFER;
#repeat 1024
. 0;\
