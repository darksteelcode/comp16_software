/* stdio.sasm - Comp16 Standard Input / Output Source Assembly File
 * Edward Wawrzynek
 * Used prefixes - print_, key_, serial_
 * --------
 * This file defines printing, keyboard input, and serial routines
 * TODO: print_unsigned, print_signed, and a key_ function for getting a single char formatted with shifts, etc, and add a serial library
 */

//!INCLUDE_PLACE_AT_END

#include stdlang.asm\
#include stdstruct.asm\
#include stdio.asm\

//Printing Functions - print_scroll, print_char, print, print_hex, print_binary, print_signed, print_unsigned, print_clear, print_at

//Scroll the text in gfx txt mem up a line
//USES AX BX
func print_scroll {
	//For each charater in 0 to 960 (lines 0 - 23), set it equal to char at +40
	put 40 BX;
	for! AX 0 960 {
		out BX GFX_TXT_ADDR;
		in CR GFX_TXT_DATA;
		out AX GFX_TXT_ADDR;
		out CR GFX_TXT_DATA;
		inc BX;
	};
	put 960 print_SCREEN_POS;
	put 0 BX;
	for! AX 960 1000 {
		out AX GFX_TXT_ADDR;
		out BX GFX_TXT_DATA;
	};
};

//Print a char and format \t (0x09 - tab), \n (0x0a - newline), and \b (0x08 - backspace) only actually output a value if the ascii value is >= 0x20*/
//USES AX BX
func print_char $char {
  	//If !(1000 > print_SCREEN_POS), print a newline
  	mv print_SCREEN_POS B OP_>;
	put 1000 A;
  	if_not! RES {
		call print_scroll;
	};
  	mv $char AX;
	//If (!(20 > char)), print the char - it will not be a special char
	mv AX B OP_>;
	put 0x20 A;
	if_not! RES {
		mv print_SCREEN_POS BX;
		out BX GFX_TXT_ADDR;
		out AX GFX_TXT_DATA;
		inc print_SCREEN_POS;
		ret 1;
	};
	//If (!($char-0x0a)), call print_scroll
	mv AX A OP_-;
	put 0x0a B;
	if_not! RES {
		call print_scroll;
		ret 1;
	};
	//If (!($char-0x09)), advance print_SCREEN_POS to +8
	mv AX A OP_-;
	put 0x09 B;
	if_not! RES {
		mv print_SCREEN_POS A OP_+;
		put 8 B;
		mv RES print_SCREEN_POS;
		ret 1;
	};
	//If (!($char-0x08)), dec print_SCREEN_POS, and clear last char
	mv AX A OP_-;
	put 0x08 B;
	if_not! RES {
		dec print_SCREEN_POS;
		mv print_SCREEN_POS A;
		out A GFX_TXT_ADDR;
		put 0 A;
		out A GFX_TXT_DATA;
		ret 1;
	};
};
//Start at the bottom left of the screen
label print_SCREEN_POS;
. 960;

//Print a string, calling print_char on each character -$string is a pointer to string
//USES AX BX CX
func print $string {
	mv $string CX;
	label print_LOOP_START;
	mv CX MAR;
	out 0 MDR;
	if! MDR {
		call print_char MDR;
		inc CX;
		jump print_LOOP_START;
	};
};

//Prints and unsigned decimal number, using only as many chars as needed
//USES AX BX (print_char) AX (Num), BX CX DX EX FX - bcd digits
func print_unsigned $num {
	mv $num AX;
	//Put 0 in all regs for bcd
	put 0 BX;
	put 0 CX;
	put 0 DX;
	put 0 EX;
	put 0 FX;
	//Shift each reg one digit into the next (AX->BX, BX->CX) - NOTE: AX shifts digit at 15, the rest digit at 3
	//Shift AX to BX
	mv AX A OP_&;
	put 0x8000 B;
	//We now just have the bit to shift in
	mv RES A OP_>>;
	put 15 B;
	//Using BP as tmp
	mv RES BP;
	//Shift AX left one, and | with BP
	mv BX A OP_<<;
	put 1 B;
	mv RES A OP_|;
	mv BP B OP_|;
	//Move BX with overflow to BP for later operations
	mv RES BP OP_|;
	//BX And with 0x000f to get rid of overflow
	mv RES A OP_&;
	put 0x000f B;
	mv RES BX;
	//Shift AX left one
	mv AX A OP_<<;
	put 1 B;
	mv RES AX;

	//Shift BX to CX, and save CX with potentail shifts into bit 4 in BP, assuming shifted BX is in BP
	//Get bit to shift into CX
	mv BP A OP_>>;
	put 4 B;
	//tmp
	mv RES BP;
	//shift CX left
	mv CX A OP_<<;
	put 1 B;
	//Or with BP, and save shift in BP
	mv RES A OP_|;
	mv BP B OP_|;
	mv RES BP;
	//And CX with ox000f to remove overflow
	mv BP A OP_&;
	put 0x000f B;
	mv RES CX OP_&;
};

//Prints a hex value to the screen - no prefix, four chars
//USES AX BX CX DX EX FX
func print_hex $num {
	mv $num EX;
  	put 0xf000 FX;
  	put 12 DX;
  	for! CX 0 4 {
	  	//Get each char: ($num & FX) >> DX
		mv EX A OP_&;
	  	mv FX B OP_&;
	  	mv RES A OP_>>;
	  	mv DX B OP_>>;
	  	mv RES A OP_+;
	  	put print_hex_CHARS B OP_+;
	  	mv RES MAR;
	  	call print_char MDR;

	  	mv DX A OP_-;
	  	put 4 B;
	  	mv RES DX;

	  	mv FX A OP_>>;
	  	put 4 B;
	  	mv RES FX;

	};
};

#string print_hex_CHARS
0123456789abcdef\

//Prints a binary value - no prefix, 16 chars
//USES AX BX CX DX EX FX
func print_binary $num {
	mv $num EX;
  	put 0b1000000000000000 FX;
  	put 15 DX;
  	for! CX 0 16 {
	  	//Get each char: ($num & FX) >> DX
		mv EX A OP_&;
	  	mv FX B OP_&;
	  	mv RES A OP_>>;
	  	mv DX B OP_>>;
	  	mv RES A OP_+;
	  	put print_binary_CHARS B OP_+;
	  	mv RES MAR;
	  	call print_char MDR;

	  	mv DX A OP_-;
	  	put 1 B;
	  	mv RES DX;

	  	mv FX A OP_>>;
	  	put 1 B;
	  	mv RES FX;

	};
};

#string print_binary_CHARS
01\

//Clears the screen, resets cursor
//Uses AX BX
func print_clear {
	put 0 BX;
	for! AX 0 1000 {
		out AX GFX_TXT_ADDR;
		out BX GFX_TXT_DATA;
	};
	put 960 print_SCREEN_POS;
};

//Prints a string at a current position on the screen - legacy support from macro library, doesn't do formatting
//Uses AX BX
func print_at $string $pos {
	mv $string AX;
	mv $pos BX;
	label print_at_LOOP;
	mv AX MAR;
	mv MDR A OP_NOT;
	mv RES CND;
	jumpc print_at_END;
	out BX GFX_TXT_ADDR;
	out MDR GFX_TXT_DATA;
	inc AX;
	inc BX;
	jump print_at_LOOP;

	label print_at_END;
};

//Keyboard Entry Functions key_input, key_clear, key_wait_for_press

//key_input puts a pointer to a buffer (static now, malloc'd latter) that contains the string in BP

//Uses AX BX CX
func key_input {
	//Init variables
	put 0 key_input_CUR_POS;
	put 0 key_input_SHIFTED;
	//Clear buffer
	for! CX 0 256 {
		mv CX A OP_+;
		put key_input_BUFFER B;
		mv RES MAR;
		put 0 A;
		mv A MDR;
	};
	label key_input_START;
	call print_char 219;
	dec print_SCREEN_POS;
	in A KEY_IN_WAITING;
	mv CR CR OP_NOT;
	mv RES CND;
	jumpc key_input_START;

	in CX KEY_DATA;
	out CX KEY_NEXT;
	//If return is pressed, return, and pass pointer to buffer in BP
	mv CX A OP_-;
	put 0x0a B;
	if_not! RES {
		//Clear box
		call print_char ' ';
		//Newline
		call print_char '\n';
		put key_input_BUFFER BP;
		ret 0;
	};
	//Apply shift keys to key_input_SHIFTED
	mv CX A OP_-;
	put 0x10 B;
	if_not! RES {
		put 1 key_input_SHIFTED;
		jump key_input_START;
	};
	mv CX A OP_-;
	put 0x0110 B;
	if_not! RES {
		put 0 key_input_SHIFTED;
		jump key_input_START;
	};
	//Apply backspace press, print backspace, dec key_input_CUR_POS
	//Only apply backspaces if key_input_CUR_POS is > 0
	mv CX A OP_-;
	put 0x08 B;
	if_not! RES {
		//Only apply if current position is > 0
		mv key_input_CUR_POS B OP_>=;
		put 0 A;
		if_not! RES {
			//Clear box
			call print_char 32;
			//Delete twice - box space and char
			call print_char 0x08;
			call print_char 0x08;
			dec key_input_CUR_POS;

			mv key_input_CUR_POS A OP_+;
			put key_input_BUFFER B;
			mv RES A;
			put 0x0 B;
			mv A MAR;
			mv B MDR;
		};
		jump key_input_START;
	};
	//Apply tabs - convert tabs to eight spaces, and write to buffer
	mv CX A OP_-;
	put 0x09 B;
	if_not! RES {
		//CX can be used because a jump back to loop start will be performed
		for! CX 0 8 {
			call print_char 32;
			mv key_input_CUR_POS A OP_+;
			put key_input_BUFFER B;
			mv RES A;
			put 0x20 B;
			mv A MAR;
			mv B MDR;
			inc key_input_CUR_POS;
		};
		jump key_input_START;
	};
	//If the key is a release, go to the start of the loop, and don't do anything with it
	mv CX A OP_&;
	put 0b0000000100000000 B;
	mv RES CND;
	jumpc key_input_START;

	//If the key is below 32 and hasn't been dealt with, go to start of loop
	mv CX B OP_>;
	put 32 A;
	mv RES CND;
	jumpc key_input_START;

	//Print the key, and add it to key_input_BUFFER
	//If shifted, put the shifted char in CX
	mv key_input_SHIFTED A OP_NOT;
	if_not! RES {
		//Subtract 32 to get offset in shifted charset
		mv CX A OP_-;
		put 32 B;
		mv RES A OP_+;
		put key_input_CHARSET_SHIFTED B;
		mv RES MAR;
		mv MDR CX;
	};
	//print and add char in CX
	mv key_input_CUR_POS A OP_+;
	put key_input_BUFFER B;
	mv RES MAR;
	mv CX MDR;
	inc key_input_CUR_POS;
	call print_char CX;

	jump key_input_START;

};

label key_input_SHIFTED;
. 0;

label key_input_CUR_POS;
. 0;

// backslash has to be a data point or else it ends the
label key_input_CHARSET_SHIFTED;
#string
 !"#$%&"()*+<_>?)!@#$%^&*(::<+>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ{|}^_~ABCDEFGHIJKLMNOPQRSTUVWXYZ{|}~\

label key_input_BUFFER;
#repeat 256
. 0;\

//Clears all keys in the key buffer
//USES NONE
func key_clear {
	//If there are no keys, jump to the end
	in A KEY_IN_WAITING;
	mv CR CR OP_NOT;
	mv RES CND;
	jumpc key_clear_END;

	label key_clear_LOOP;
	out A KEY_NEXT;
	in CND KEY_IN_WAITING;
	jumpc key_clear_LOOP;

	label key_clear_END;
};
//Waits for a key press
//USES NONE
func key_wait_for_press {
	label key_wait_for_press_START;
	in A KEY_IN_WAITING;
	mv CR CR OP_NOT;
	mv RES CND;
	jumpc key_wait_for_press_START;
};
